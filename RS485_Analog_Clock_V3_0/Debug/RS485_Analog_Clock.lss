
RS485_Analog_Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000a32  00000ac6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000043  0080010a  0080010a  00000ad0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ad0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010dc  00000000  00000000  00000c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000866  00000000  00000000  00001ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009aa  00000000  00000000  0000254a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  00002ef4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000674  00000000  00000000  0000311c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005fb  00000000  00000000  00003790  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003d8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 44 04 	jmp	0x888	; 0x888 <__vector_14>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 02 03 	jmp	0x604	; 0x604 <__vector_18>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	2f 02       	muls	r18, r31
  6a:	4b 02       	muls	r20, r27
  6c:	67 02       	muls	r22, r23
  6e:	7e 02       	muls	r23, r30
  70:	9a 02       	muls	r25, r26
  72:	ae 02       	muls	r26, r30
  74:	ed 02       	muls	r30, r29

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	e2 e3       	ldi	r30, 0x32	; 50
  8a:	fa e0       	ldi	r31, 0x0A	; 10
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	aa 30       	cpi	r26, 0x0A	; 10
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	aa e0       	ldi	r26, 0x0A	; 10
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ad 34       	cpi	r26, 0x4D	; 77
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 a2 04 	call	0x944	; 0x944 <main>
  ac:	0c 94 17 05 	jmp	0xa2e	; 0xa2e <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <send_mechanics_step>:
/********************************************************************************************************************************************************************************************************/
/********************************************************************************************************************************************************************************************************/
/********************************************************************************************************************************************************************************************************/
void Stepper_Back_DK(struct Stepper_Clock *Stp_Drv) // Ok.
{
	Stp_Drv->Reel_Pos_dk--;
  b4:	fc 01       	movw	r30, r24
  b6:	63 ff       	sbrs	r22, 3
  b8:	0c c0       	rjmp	.+24     	; 0xd2 <send_mechanics_step+0x1e>
  ba:	2b b1       	in	r18, 0x0b	; 11
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	03 80       	ldd	r0, Z+3	; 0x03
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <send_mechanics_step+0x14>
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	0a 94       	dec	r0
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <send_mechanics_step+0x10>
  cc:	82 2b       	or	r24, r18
  ce:	8b b9       	out	0x0b, r24	; 11
  d0:	0c c0       	rjmp	.+24     	; 0xea <send_mechanics_step+0x36>
  d2:	2b b1       	in	r18, 0x0b	; 11
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	03 80       	ldd	r0, Z+3	; 0x03
  da:	02 c0       	rjmp	.+4      	; 0xe0 <send_mechanics_step+0x2c>
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	0a 94       	dec	r0
  e2:	e2 f7       	brpl	.-8      	; 0xdc <send_mechanics_step+0x28>
  e4:	80 95       	com	r24
  e6:	82 23       	and	r24, r18
  e8:	8b b9       	out	0x0b, r24	; 11
  ea:	4b b1       	in	r20, 0x0b	; 11
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	9c 01       	movw	r18, r24
  f2:	01 80       	ldd	r0, Z+1	; 0x01
  f4:	02 c0       	rjmp	.+4      	; 0xfa <send_mechanics_step+0x46>
  f6:	22 0f       	add	r18, r18
  f8:	33 1f       	adc	r19, r19
  fa:	0a 94       	dec	r0
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <send_mechanics_step+0x42>
  fe:	24 2b       	or	r18, r20
 100:	2b b9       	out	0x0b, r18	; 11
 102:	2b b1       	in	r18, 0x0b	; 11
 104:	01 80       	ldd	r0, Z+1	; 0x01
 106:	02 c0       	rjmp	.+4      	; 0x10c <send_mechanics_step+0x58>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	0a 94       	dec	r0
 10e:	e2 f7       	brpl	.-8      	; 0x108 <send_mechanics_step+0x54>
 110:	80 95       	com	r24
 112:	82 23       	and	r24, r18
 114:	8b b9       	out	0x0b, r24	; 11
 116:	62 ff       	sbrs	r22, 2
 118:	0c c0       	rjmp	.+24     	; 0x132 <send_mechanics_step+0x7e>
 11a:	2b b1       	in	r18, 0x0b	; 11
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	03 80       	ldd	r0, Z+3	; 0x03
 122:	02 c0       	rjmp	.+4      	; 0x128 <send_mechanics_step+0x74>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	0a 94       	dec	r0
 12a:	e2 f7       	brpl	.-8      	; 0x124 <send_mechanics_step+0x70>
 12c:	82 2b       	or	r24, r18
 12e:	8b b9       	out	0x0b, r24	; 11
 130:	0c c0       	rjmp	.+24     	; 0x14a <send_mechanics_step+0x96>
 132:	2b b1       	in	r18, 0x0b	; 11
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	03 80       	ldd	r0, Z+3	; 0x03
 13a:	02 c0       	rjmp	.+4      	; 0x140 <send_mechanics_step+0x8c>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	0a 94       	dec	r0
 142:	e2 f7       	brpl	.-8      	; 0x13c <send_mechanics_step+0x88>
 144:	80 95       	com	r24
 146:	82 23       	and	r24, r18
 148:	8b b9       	out	0x0b, r24	; 11
 14a:	4b b1       	in	r20, 0x0b	; 11
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	9c 01       	movw	r18, r24
 152:	01 80       	ldd	r0, Z+1	; 0x01
 154:	02 c0       	rjmp	.+4      	; 0x15a <send_mechanics_step+0xa6>
 156:	22 0f       	add	r18, r18
 158:	33 1f       	adc	r19, r19
 15a:	0a 94       	dec	r0
 15c:	e2 f7       	brpl	.-8      	; 0x156 <send_mechanics_step+0xa2>
 15e:	24 2b       	or	r18, r20
 160:	2b b9       	out	0x0b, r18	; 11
 162:	2b b1       	in	r18, 0x0b	; 11
 164:	01 80       	ldd	r0, Z+1	; 0x01
 166:	02 c0       	rjmp	.+4      	; 0x16c <send_mechanics_step+0xb8>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	0a 94       	dec	r0
 16e:	e2 f7       	brpl	.-8      	; 0x168 <send_mechanics_step+0xb4>
 170:	80 95       	com	r24
 172:	82 23       	and	r24, r18
 174:	8b b9       	out	0x0b, r24	; 11
 176:	61 ff       	sbrs	r22, 1
 178:	0c c0       	rjmp	.+24     	; 0x192 <send_mechanics_step+0xde>
 17a:	2b b1       	in	r18, 0x0b	; 11
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	03 80       	ldd	r0, Z+3	; 0x03
 182:	02 c0       	rjmp	.+4      	; 0x188 <send_mechanics_step+0xd4>
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	0a 94       	dec	r0
 18a:	e2 f7       	brpl	.-8      	; 0x184 <send_mechanics_step+0xd0>
 18c:	82 2b       	or	r24, r18
 18e:	8b b9       	out	0x0b, r24	; 11
 190:	0c c0       	rjmp	.+24     	; 0x1aa <send_mechanics_step+0xf6>
 192:	2b b1       	in	r18, 0x0b	; 11
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	03 80       	ldd	r0, Z+3	; 0x03
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <send_mechanics_step+0xec>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	0a 94       	dec	r0
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <send_mechanics_step+0xe8>
 1a4:	80 95       	com	r24
 1a6:	82 23       	and	r24, r18
 1a8:	8b b9       	out	0x0b, r24	; 11
 1aa:	4b b1       	in	r20, 0x0b	; 11
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	9c 01       	movw	r18, r24
 1b2:	01 80       	ldd	r0, Z+1	; 0x01
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <send_mechanics_step+0x106>
 1b6:	22 0f       	add	r18, r18
 1b8:	33 1f       	adc	r19, r19
 1ba:	0a 94       	dec	r0
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <send_mechanics_step+0x102>
 1be:	24 2b       	or	r18, r20
 1c0:	2b b9       	out	0x0b, r18	; 11
 1c2:	2b b1       	in	r18, 0x0b	; 11
 1c4:	01 80       	ldd	r0, Z+1	; 0x01
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <send_mechanics_step+0x118>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	0a 94       	dec	r0
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <send_mechanics_step+0x114>
 1d0:	80 95       	com	r24
 1d2:	82 23       	and	r24, r18
 1d4:	8b b9       	out	0x0b, r24	; 11
 1d6:	60 ff       	sbrs	r22, 0
 1d8:	0c c0       	rjmp	.+24     	; 0x1f2 <send_mechanics_step+0x13e>
 1da:	2b b1       	in	r18, 0x0b	; 11
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	03 80       	ldd	r0, Z+3	; 0x03
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <send_mechanics_step+0x134>
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	0a 94       	dec	r0
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <send_mechanics_step+0x130>
 1ec:	82 2b       	or	r24, r18
 1ee:	8b b9       	out	0x0b, r24	; 11
 1f0:	0c c0       	rjmp	.+24     	; 0x20a <send_mechanics_step+0x156>
 1f2:	2b b1       	in	r18, 0x0b	; 11
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	03 80       	ldd	r0, Z+3	; 0x03
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <send_mechanics_step+0x14c>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	0a 94       	dec	r0
 202:	e2 f7       	brpl	.-8      	; 0x1fc <send_mechanics_step+0x148>
 204:	80 95       	com	r24
 206:	82 23       	and	r24, r18
 208:	8b b9       	out	0x0b, r24	; 11
 20a:	4b b1       	in	r20, 0x0b	; 11
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	9c 01       	movw	r18, r24
 212:	01 80       	ldd	r0, Z+1	; 0x01
 214:	02 c0       	rjmp	.+4      	; 0x21a <send_mechanics_step+0x166>
 216:	22 0f       	add	r18, r18
 218:	33 1f       	adc	r19, r19
 21a:	0a 94       	dec	r0
 21c:	e2 f7       	brpl	.-8      	; 0x216 <send_mechanics_step+0x162>
 21e:	24 2b       	or	r18, r20
 220:	2b b9       	out	0x0b, r18	; 11
 222:	2b b1       	in	r18, 0x0b	; 11
 224:	01 80       	ldd	r0, Z+1	; 0x01
 226:	02 c0       	rjmp	.+4      	; 0x22c <send_mechanics_step+0x178>
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	0a 94       	dec	r0
 22e:	e2 f7       	brpl	.-8      	; 0x228 <send_mechanics_step+0x174>
 230:	80 95       	com	r24
 232:	82 23       	and	r24, r18
 234:	8b b9       	out	0x0b, r24	; 11
 236:	08 95       	ret

00000238 <Stepper_Off>:
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	ec 01       	movw	r28, r24
 23e:	60 e0       	ldi	r22, 0x00	; 0
 240:	0e 94 5a 00 	call	0xb4	; 0xb4 <send_mechanics_step>
 244:	8a e0       	ldi	r24, 0x0A	; 10
 246:	8f 87       	std	Y+15, r24	; 0x0f
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <Stepper_Init>:
 24e:	6f 92       	push	r6
 250:	7f 92       	push	r7
 252:	8f 92       	push	r8
 254:	af 92       	push	r10
 256:	cf 92       	push	r12
 258:	ef 92       	push	r14
 25a:	0f 93       	push	r16
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	cd b7       	in	r28, 0x3d	; 61
 262:	de b7       	in	r29, 0x3e	; 62
 264:	3c 01       	movw	r6, r24
 266:	fc 01       	movw	r30, r24
 268:	60 83       	st	Z, r22
 26a:	41 83       	std	Z+1, r20	; 0x01
 26c:	22 83       	std	Z+2, r18	; 0x02
 26e:	03 83       	std	Z+3, r16	; 0x03
 270:	e4 82       	std	Z+4, r14	; 0x04
 272:	c5 82       	std	Z+5, r12	; 0x05
 274:	a6 82       	std	Z+6, r10	; 0x06
 276:	87 82       	std	Z+7, r8	; 0x07
 278:	5a b1       	in	r21, 0x0a	; 10
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	9c 01       	movw	r18, r24
 280:	02 c0       	rjmp	.+4      	; 0x286 <Stepper_Init+0x38>
 282:	22 0f       	add	r18, r18
 284:	33 1f       	adc	r19, r19
 286:	4a 95       	dec	r20
 288:	e2 f7       	brpl	.-8      	; 0x282 <Stepper_Init+0x34>
 28a:	25 2b       	or	r18, r21
 28c:	2a b9       	out	0x0a, r18	; 10
 28e:	4a b1       	in	r20, 0x0a	; 10
 290:	9c 01       	movw	r18, r24
 292:	03 80       	ldd	r0, Z+3	; 0x03
 294:	02 c0       	rjmp	.+4      	; 0x29a <Stepper_Init+0x4c>
 296:	22 0f       	add	r18, r18
 298:	33 1f       	adc	r19, r19
 29a:	0a 94       	dec	r0
 29c:	e2 f7       	brpl	.-8      	; 0x296 <Stepper_Init+0x48>
 29e:	24 2b       	or	r18, r20
 2a0:	2a b9       	out	0x0a, r18	; 10
 2a2:	37 b1       	in	r19, 0x07	; 7
 2a4:	ac 01       	movw	r20, r24
 2a6:	05 80       	ldd	r0, Z+5	; 0x05
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <Stepper_Init+0x60>
 2aa:	44 0f       	add	r20, r20
 2ac:	55 1f       	adc	r21, r21
 2ae:	0a 94       	dec	r0
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <Stepper_Init+0x5c>
 2b2:	24 2f       	mov	r18, r20
 2b4:	20 95       	com	r18
 2b6:	23 23       	and	r18, r19
 2b8:	27 b9       	out	0x07, r18	; 7
 2ba:	48 b1       	in	r20, 0x08	; 8
 2bc:	9c 01       	movw	r18, r24
 2be:	05 80       	ldd	r0, Z+5	; 0x05
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <Stepper_Init+0x78>
 2c2:	22 0f       	add	r18, r18
 2c4:	33 1f       	adc	r19, r19
 2c6:	0a 94       	dec	r0
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <Stepper_Init+0x74>
 2ca:	24 2b       	or	r18, r20
 2cc:	28 b9       	out	0x08, r18	; 8
 2ce:	37 b1       	in	r19, 0x07	; 7
 2d0:	ac 01       	movw	r20, r24
 2d2:	07 80       	ldd	r0, Z+7	; 0x07
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <Stepper_Init+0x8c>
 2d6:	44 0f       	add	r20, r20
 2d8:	55 1f       	adc	r21, r21
 2da:	0a 94       	dec	r0
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <Stepper_Init+0x88>
 2de:	24 2f       	mov	r18, r20
 2e0:	20 95       	com	r18
 2e2:	23 23       	and	r18, r19
 2e4:	27 b9       	out	0x07, r18	; 7
 2e6:	48 b1       	in	r20, 0x08	; 8
 2e8:	9c 01       	movw	r18, r24
 2ea:	07 80       	ldd	r0, Z+7	; 0x07
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <Stepper_Init+0xa4>
 2ee:	22 0f       	add	r18, r18
 2f0:	33 1f       	adc	r19, r19
 2f2:	0a 94       	dec	r0
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <Stepper_Init+0xa0>
 2f6:	24 2b       	or	r18, r20
 2f8:	28 b9       	out	0x08, r18	; 8
 2fa:	4b b1       	in	r20, 0x0b	; 11
 2fc:	9c 01       	movw	r18, r24
 2fe:	01 80       	ldd	r0, Z+1	; 0x01
 300:	02 c0       	rjmp	.+4      	; 0x306 <Stepper_Init+0xb8>
 302:	22 0f       	add	r18, r18
 304:	33 1f       	adc	r19, r19
 306:	0a 94       	dec	r0
 308:	e2 f7       	brpl	.-8      	; 0x302 <Stepper_Init+0xb4>
 30a:	24 2b       	or	r18, r20
 30c:	2b b9       	out	0x0b, r18	; 11
 30e:	2b b1       	in	r18, 0x0b	; 11
 310:	03 80       	ldd	r0, Z+3	; 0x03
 312:	02 c0       	rjmp	.+4      	; 0x318 <Stepper_Init+0xca>
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	0a 94       	dec	r0
 31a:	e2 f7       	brpl	.-8      	; 0x314 <Stepper_Init+0xc6>
 31c:	82 2b       	or	r24, r18
 31e:	8b b9       	out	0x0b, r24	; 11
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	80 87       	std	Z+8, r24	; 0x08
 324:	82 87       	std	Z+10, r24	; 0x0a
 326:	13 86       	std	Z+11, r1	; 0x0b
 328:	11 86       	std	Z+9, r1	; 0x09
 32a:	c3 01       	movw	r24, r6
 32c:	0e 94 1c 01 	call	0x238	; 0x238 <Stepper_Off>
 330:	c3 01       	movw	r24, r6
 332:	0e 94 1c 01 	call	0x238	; 0x238 <Stepper_Off>
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	0f 91       	pop	r16
 33c:	ef 90       	pop	r14
 33e:	cf 90       	pop	r12
 340:	af 90       	pop	r10
 342:	8f 90       	pop	r8
 344:	7f 90       	pop	r7
 346:	6f 90       	pop	r6
 348:	08 95       	ret

0000034a <Stepper_Set_Reel_Pos_dk>:
 34a:	fc 01       	movw	r30, r24
 34c:	71 8b       	std	Z+17, r23	; 0x11
 34e:	60 8b       	std	Z+16, r22	; 0x10
 350:	08 95       	ret

00000352 <Stepper_Next_Step>:
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
 356:	ec 01       	movw	r28, r24
 358:	88 85       	ldd	r24, Y+8	; 0x08
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	41 f4       	brne	.+16     	; 0x36e <Stepper_Next_Step+0x1c>
 35e:	8a 85       	ldd	r24, Y+10	; 0x0a
 360:	8f 5f       	subi	r24, 0xFF	; 255
 362:	88 30       	cpi	r24, 0x08	; 8
 364:	10 f4       	brcc	.+4      	; 0x36a <Stepper_Next_Step+0x18>
 366:	8a 87       	std	Y+10, r24	; 0x0a
 368:	0a c0       	rjmp	.+20     	; 0x37e <Stepper_Next_Step+0x2c>
 36a:	1a 86       	std	Y+10, r1	; 0x0a
 36c:	08 c0       	rjmp	.+16     	; 0x37e <Stepper_Next_Step+0x2c>
 36e:	8a 85       	ldd	r24, Y+10	; 0x0a
 370:	81 50       	subi	r24, 0x01	; 1
 372:	88 30       	cpi	r24, 0x08	; 8
 374:	10 f4       	brcc	.+4      	; 0x37a <Stepper_Next_Step+0x28>
 376:	8a 87       	std	Y+10, r24	; 0x0a
 378:	02 c0       	rjmp	.+4      	; 0x37e <Stepper_Next_Step+0x2c>
 37a:	87 e0       	ldi	r24, 0x07	; 7
 37c:	8a 87       	std	Y+10, r24	; 0x0a
 37e:	ea 85       	ldd	r30, Y+10	; 0x0a
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	ef 5f       	subi	r30, 0xFF	; 255
 384:	fe 4f       	sbci	r31, 0xFE	; 254
 386:	60 81       	ld	r22, Z
 388:	ce 01       	movw	r24, r28
 38a:	0e 94 5a 00 	call	0xb4	; 0xb4 <send_mechanics_step>
 38e:	8e 89       	ldd	r24, Y+22	; 0x16
 390:	9f 89       	ldd	r25, Y+23	; 0x17
 392:	01 96       	adiw	r24, 0x01	; 1
 394:	9f 8b       	std	Y+23, r25	; 0x17
 396:	8e 8b       	std	Y+22, r24	; 0x16
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	08 95       	ret

0000039e <Stepper_Back_Step>:
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
 3a2:	ec 01       	movw	r28, r24
 3a4:	88 85       	ldd	r24, Y+8	; 0x08
 3a6:	81 30       	cpi	r24, 0x01	; 1
 3a8:	49 f4       	brne	.+18     	; 0x3bc <Stepper_Back_Step+0x1e>
 3aa:	8a 85       	ldd	r24, Y+10	; 0x0a
 3ac:	81 50       	subi	r24, 0x01	; 1
 3ae:	88 30       	cpi	r24, 0x08	; 8
 3b0:	10 f4       	brcc	.+4      	; 0x3b6 <Stepper_Back_Step+0x18>
 3b2:	8a 87       	std	Y+10, r24	; 0x0a
 3b4:	0a c0       	rjmp	.+20     	; 0x3ca <Stepper_Back_Step+0x2c>
 3b6:	87 e0       	ldi	r24, 0x07	; 7
 3b8:	8a 87       	std	Y+10, r24	; 0x0a
 3ba:	07 c0       	rjmp	.+14     	; 0x3ca <Stepper_Back_Step+0x2c>
 3bc:	8a 85       	ldd	r24, Y+10	; 0x0a
 3be:	8f 5f       	subi	r24, 0xFF	; 255
 3c0:	88 30       	cpi	r24, 0x08	; 8
 3c2:	10 f4       	brcc	.+4      	; 0x3c8 <Stepper_Back_Step+0x2a>
 3c4:	8a 87       	std	Y+10, r24	; 0x0a
 3c6:	01 c0       	rjmp	.+2      	; 0x3ca <Stepper_Back_Step+0x2c>
 3c8:	1a 86       	std	Y+10, r1	; 0x0a
 3ca:	ea 85       	ldd	r30, Y+10	; 0x0a
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	ef 5f       	subi	r30, 0xFF	; 255
 3d0:	fe 4f       	sbci	r31, 0xFE	; 254
 3d2:	60 81       	ld	r22, Z
 3d4:	ce 01       	movw	r24, r28
 3d6:	0e 94 5a 00 	call	0xb4	; 0xb4 <send_mechanics_step>
 3da:	8e 89       	ldd	r24, Y+22	; 0x16
 3dc:	9f 89       	ldd	r25, Y+23	; 0x17
 3de:	01 97       	sbiw	r24, 0x01	; 1
 3e0:	9f 8b       	std	Y+23, r25	; 0x17
 3e2:	8e 8b       	std	Y+22, r24	; 0x16
 3e4:	df 91       	pop	r29
 3e6:	cf 91       	pop	r28
 3e8:	08 95       	ret

000003ea <Stepper_Clock_Process>:
}
/********************************************************************************************************************************************************************************************************/
/********************************************************************************************************************************************************************************************************/
/********************************************************************************************************************************************************************************************************/
void Stepper_Clock_Process(struct Stepper_Clock *Stp_Drv)
{
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29
 3ee:	fc 01       	movw	r30, r24
	if(Stp_Drv->Step_Time >= Stp_Drv->Acceleration_Time)
 3f0:	96 85       	ldd	r25, Z+14	; 0x0e
 3f2:	87 85       	ldd	r24, Z+15	; 0x0f
 3f4:	98 17       	cp	r25, r24
 3f6:	80 f0       	brcs	.+32     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	{
		if(Stp_Drv->Acceleration_Time>STEP_TIME)
 3f8:	83 30       	cpi	r24, 0x03	; 3
 3fa:	10 f0       	brcs	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
		{
			Stp_Drv->Acceleration_Time--;
 3fc:	81 50       	subi	r24, 0x01	; 1
 3fe:	87 87       	std	Z+15, r24	; 0x0f
		}
		Stp_Drv->Step_Time = 0;
 400:	16 86       	std	Z+14, r1	; 0x0e
	{
		Stp_Drv->Step_Time++;
		return;
	}
	
	if(!digitalRead(C, Stp_Drv->Ref_DK_Pin))
 402:	86 b1       	in	r24, 0x06	; 6
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	07 80       	ldd	r0, Z+7	; 0x07
 408:	02 c0       	rjmp	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40a:	95 95       	asr	r25
 40c:	87 95       	ror	r24
 40e:	0a 94       	dec	r0
 410:	e2 f7       	brpl	.-8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 412:	80 ff       	sbrs	r24, 0
 414:	04 c0       	rjmp	.+8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 416:	12 c0       	rjmp	.+36     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
		}
		Stp_Drv->Step_Time = 0;
	}
	else
	{
		Stp_Drv->Step_Time++;
 418:	9f 5f       	subi	r25, 0xFF	; 255
 41a:	96 87       	std	Z+14, r25	; 0x0e
		return;
 41c:	f0 c0       	rjmp	.+480    	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
 41e:	ef 01       	movw	r28, r30
	}
	
	if(!digitalRead(C, Stp_Drv->Ref_DK_Pin))
	{
		if(Stp_Drv->Act == PASSIVE)
 420:	83 85       	ldd	r24, Z+11	; 0x0b
 422:	81 11       	cpse	r24, r1
 424:	0f c0       	rjmp	.+30     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
		{
			Stp_Drv->Act           = ACTIVE;
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	83 87       	std	Z+11, r24	; 0x0b
			Stp_Drv->Phase         = 0x01;
 42a:	82 87       	std	Z+10, r24	; 0x0a
			Stp_Drv->Ref_Wait_Time = 0;
 42c:	15 86       	std	Z+13, r1	; 0x0d
 42e:	14 86       	std	Z+12, r1	; 0x0c
			Stp_Drv->Reel_Pos_dk   = 0;
 430:	11 8a       	std	Z+17, r1	; 0x11
 432:	10 8a       	std	Z+16, r1	; 0x10
			Stp_Drv->Scale_Pos_dk  = 0;
 434:	13 8a       	std	Z+19, r1	; 0x13
 436:	12 8a       	std	Z+18, r1	; 0x12
			Stp_Drv->Reel_Pos_stp  = 0;
			Stp_Drv->Scale_Pos_stp = 0;
			Stp_Drv->State         = CLOCK_STARTUP;
 438:	81 87       	std	Z+9, r24	; 0x09
 43a:	11 c0       	rjmp	.+34     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
		}
	}
	else
	{
		Stp_Drv->Act   = PASSIVE;
 43c:	13 86       	std	Z+11, r1	; 0x0b
		Stp_Drv->State = CLOCK_PARK;
 43e:	88 e0       	ldi	r24, 0x08	; 8
 440:	81 87       	std	Z+9, r24	; 0x09
 442:	dd c0       	rjmp	.+442    	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
	}
	
	switch(Stp_Drv->State)
 444:	e1 85       	ldd	r30, Z+9	; 0x09
 446:	8e 2f       	mov	r24, r30
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	fc 01       	movw	r30, r24
 44c:	31 97       	sbiw	r30, 0x01	; 1
 44e:	e7 30       	cpi	r30, 0x07	; 7
 450:	f1 05       	cpc	r31, r1
 452:	08 f0       	brcs	.+2      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 454:	d4 c0       	rjmp	.+424    	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
 456:	ec 5c       	subi	r30, 0xCC	; 204
 458:	ff 4f       	sbci	r31, 0xFF	; 255
 45a:	0c 94 02 05 	jmp	0xa04	; 0xa04 <__tablejump2__>
	{
		case CLOCK_STARTUP:
				Stp_Drv->Reel_Pos_stp  = 24576;
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	90 e6       	ldi	r25, 0x60	; 96
 462:	9d 8b       	std	Y+21, r25	; 0x15
 464:	8c 8b       	std	Y+20, r24	; 0x14
				Stp_Drv->Scale_Pos_stp = 0;
 466:	1f 8a       	std	Y+23, r1	; 0x17
 468:	1e 8a       	std	Y+22, r1	; 0x16
				if(!digitalRead(C, Stp_Drv->Ref_12_Pin))	// in the sensor
 46a:	86 b1       	in	r24, 0x06	; 6
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	0d 80       	ldd	r0, Y+5	; 0x05
 470:	02 c0       	rjmp	.+4      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 472:	95 95       	asr	r25
 474:	87 95       	ror	r24
 476:	0a 94       	dec	r0
 478:	e2 f7       	brpl	.-8      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 47a:	80 fd       	sbrc	r24, 0
 47c:	06 c0       	rjmp	.+12     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
				{
					Stp_Drv->State = IN_THE_SENSOR;
 47e:	82 e0       	ldi	r24, 0x02	; 2
 480:	89 87       	std	Y+9, r24	; 0x09
					Stepper_Off(Stp_Drv);
 482:	ce 01       	movw	r24, r28
 484:	0e 94 1c 01 	call	0x238	; 0x238 <Stepper_Off>
 488:	ba c0       	rjmp	.+372    	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
				}
				else
				{                                           // out of sensor
					Stp_Drv->State = FIND_REF;
 48a:	84 e0       	ldi	r24, 0x04	; 4
 48c:	89 87       	std	Y+9, r24	; 0x09
					Stepper_Off(Stp_Drv);
 48e:	ce 01       	movw	r24, r28
 490:	0e 94 1c 01 	call	0x238	; 0x238 <Stepper_Off>
 494:	b4 c0       	rjmp	.+360    	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
				}
			break;
		case IN_THE_SENSOR:
				if(digitalRead(C, Stp_Drv->Ref_12_Pin))
 496:	86 b1       	in	r24, 0x06	; 6
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	0d 80       	ldd	r0, Y+5	; 0x05
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 49e:	95 95       	asr	r25
 4a0:	87 95       	ror	r24
 4a2:	0a 94       	dec	r0
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 4a6:	80 ff       	sbrs	r24, 0
 4a8:	0e c0       	rjmp	.+28     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
				{
					Stp_Drv->State         = TEN_MIN_GO_BACK;
 4aa:	83 e0       	ldi	r24, 0x03	; 3
 4ac:	89 87       	std	Y+9, r24	; 0x09
					Stp_Drv->Reel_Pos_stp  = 24576-600;
 4ae:	88 ea       	ldi	r24, 0xA8	; 168
 4b0:	9d e5       	ldi	r25, 0x5D	; 93
 4b2:	9d 8b       	std	Y+21, r25	; 0x15
 4b4:	8c 8b       	std	Y+20, r24	; 0x14
					Stp_Drv->Scale_Pos_stp = 24576;
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	90 e6       	ldi	r25, 0x60	; 96
 4ba:	9f 8b       	std	Y+23, r25	; 0x17
 4bc:	8e 8b       	std	Y+22, r24	; 0x16
					Stepper_Off(Stp_Drv);
 4be:	ce 01       	movw	r24, r28
 4c0:	0e 94 1c 01 	call	0x238	; 0x238 <Stepper_Off>
 4c4:	9c c0       	rjmp	.+312    	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
				}
				else
				{
					Stepper_Back_Step(Stp_Drv);
 4c6:	ce 01       	movw	r24, r28
 4c8:	0e 94 cf 01 	call	0x39e	; 0x39e <Stepper_Back_Step>
 4cc:	98 c0       	rjmp	.+304    	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
				}
			break;
		case TEN_MIN_GO_BACK:
				if(Stp_Drv->Reel_Pos_stp == Stp_Drv->Scale_Pos_stp)
 4ce:	2c 89       	ldd	r18, Y+20	; 0x14
 4d0:	3d 89       	ldd	r19, Y+21	; 0x15
 4d2:	8e 89       	ldd	r24, Y+22	; 0x16
 4d4:	9f 89       	ldd	r25, Y+23	; 0x17
 4d6:	28 17       	cp	r18, r24
 4d8:	39 07       	cpc	r19, r25
 4da:	61 f4       	brne	.+24     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
				{
					Stp_Drv->State         = FIND_REF;
 4dc:	84 e0       	ldi	r24, 0x04	; 4
 4de:	89 87       	std	Y+9, r24	; 0x09
					Stp_Drv->Reel_Pos_stp  = 24576;
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	90 e6       	ldi	r25, 0x60	; 96
 4e4:	9d 8b       	std	Y+21, r25	; 0x15
 4e6:	8c 8b       	std	Y+20, r24	; 0x14
					Stp_Drv->Scale_Pos_stp = 0;
 4e8:	1f 8a       	std	Y+23, r1	; 0x17
 4ea:	1e 8a       	std	Y+22, r1	; 0x16
					Stepper_Off(Stp_Drv);
 4ec:	ce 01       	movw	r24, r28
 4ee:	0e 94 1c 01 	call	0x238	; 0x238 <Stepper_Off>
 4f2:	85 c0       	rjmp	.+266    	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
				}
				else
				{
					Stepper_Back_Step(Stp_Drv);
 4f4:	ce 01       	movw	r24, r28
 4f6:	0e 94 cf 01 	call	0x39e	; 0x39e <Stepper_Back_Step>
 4fa:	81 c0       	rjmp	.+258    	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
				}
			break;
		case FIND_REF:
				if(!digitalRead(C, Stp_Drv->Ref_12_Pin))
 4fc:	86 b1       	in	r24, 0x06	; 6
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	0d 80       	ldd	r0, Y+5	; 0x05
 502:	02 c0       	rjmp	.+4      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 504:	95 95       	asr	r25
 506:	87 95       	ror	r24
 508:	0a 94       	dec	r0
 50a:	e2 f7       	brpl	.-8      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 50c:	80 fd       	sbrc	r24, 0
 50e:	0e c0       	rjmp	.+28     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
				{
					Stp_Drv->Reel_Pos_stp  = 0;
 510:	1d 8a       	std	Y+21, r1	; 0x15
 512:	1c 8a       	std	Y+20, r1	; 0x14
					Stp_Drv->Scale_Pos_stp = 0;
 514:	1f 8a       	std	Y+23, r1	; 0x17
 516:	1e 8a       	std	Y+22, r1	; 0x16
					Stp_Drv->Ref_Wait_Time = (5000 / STEP_TIME);
 518:	84 ec       	ldi	r24, 0xC4	; 196
 51a:	99 e0       	ldi	r25, 0x09	; 9
 51c:	9d 87       	std	Y+13, r25	; 0x0d
 51e:	8c 87       	std	Y+12, r24	; 0x0c
					Stp_Drv->State         = WAIT_REF;
 520:	85 e0       	ldi	r24, 0x05	; 5
 522:	89 87       	std	Y+9, r24	; 0x09
					Stepper_Off(Stp_Drv);
 524:	ce 01       	movw	r24, r28
 526:	0e 94 1c 01 	call	0x238	; 0x238 <Stepper_Off>
 52a:	69 c0       	rjmp	.+210    	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
				}
				else
				{
					Stepper_Next_Step(Stp_Drv);
 52c:	ce 01       	movw	r24, r28
 52e:	0e 94 a9 01 	call	0x352	; 0x352 <Stepper_Next_Step>
 532:	65 c0       	rjmp	.+202    	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
				}
			break;
		case WAIT_REF:
				if(Stp_Drv->Ref_Wait_Time == 0)
 534:	8c 85       	ldd	r24, Y+12	; 0x0c
 536:	9d 85       	ldd	r25, Y+13	; 0x0d
 538:	00 97       	sbiw	r24, 0x00	; 0
 53a:	61 f4       	brne	.+24     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
				{
					Stp_Drv->Scale_Pos_dk  = 0;
 53c:	1b 8a       	std	Y+19, r1	; 0x13
 53e:	1a 8a       	std	Y+18, r1	; 0x12
					Stp_Drv->Reel_Pos_stp  = 0;
 540:	1d 8a       	std	Y+21, r1	; 0x15
 542:	1c 8a       	std	Y+20, r1	; 0x14
					Stp_Drv->Scale_Pos_stp = 0;
 544:	1f 8a       	std	Y+23, r1	; 0x17
 546:	1e 8a       	std	Y+22, r1	; 0x16
					Stp_Drv->State         = NORMAL_MODE;
 548:	86 e0       	ldi	r24, 0x06	; 6
 54a:	89 87       	std	Y+9, r24	; 0x09
					Stepper_Off(Stp_Drv);
 54c:	ce 01       	movw	r24, r28
 54e:	0e 94 1c 01 	call	0x238	; 0x238 <Stepper_Off>
 552:	55 c0       	rjmp	.+170    	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
				}
				else
				{
					Stp_Drv->Ref_Wait_Time--;
 554:	01 97       	sbiw	r24, 0x01	; 1
 556:	9d 87       	std	Y+13, r25	; 0x0d
 558:	8c 87       	std	Y+12, r24	; 0x0c
 55a:	51 c0       	rjmp	.+162    	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
				}
			break;
		case NORMAL_MODE:
				if(Stp_Drv->Scale_Pos_dk >= 720)
 55c:	4a 89       	ldd	r20, Y+18	; 0x12
 55e:	5b 89       	ldd	r21, Y+19	; 0x13
 560:	40 3d       	cpi	r20, 0xD0	; 208
 562:	82 e0       	ldi	r24, 0x02	; 2
 564:	58 07       	cpc	r21, r24
 566:	68 f0       	brcs	.+26     	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
				{
					Stp_Drv->Scale_Pos_dk  = 0;
 568:	1b 8a       	std	Y+19, r1	; 0x13
 56a:	1a 8a       	std	Y+18, r1	; 0x12
					Stp_Drv->Reel_Pos_stp  = 0;
 56c:	1d 8a       	std	Y+21, r1	; 0x15
 56e:	1c 8a       	std	Y+20, r1	; 0x14
					Stp_Drv->Scale_Pos_stp = 0;
 570:	1f 8a       	std	Y+23, r1	; 0x17
 572:	1e 8a       	std	Y+22, r1	; 0x16
					Stp_Drv->State         = NORMAL_MODE;
 574:	86 e0       	ldi	r24, 0x06	; 6
 576:	89 87       	std	Y+9, r24	; 0x09
				}
			
				if(Stp_Drv->Reel_Pos_dk != Stp_Drv->Scale_Pos_dk)
 578:	88 89       	ldd	r24, Y+16	; 0x10
 57a:	99 89       	ldd	r25, Y+17	; 0x11
 57c:	89 2b       	or	r24, r25
 57e:	09 f5       	brne	.+66     	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
 580:	28 c0       	rjmp	.+80     	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
 582:	88 89       	ldd	r24, Y+16	; 0x10
 584:	99 89       	ldd	r25, Y+17	; 0x11
 586:	48 17       	cp	r20, r24
 588:	59 07       	cpc	r21, r25
 58a:	19 f1       	breq	.+70     	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
				{
					Stp_Drv->Reel_Pos_stp += 34;
 58c:	ec 89       	ldd	r30, Y+20	; 0x14
 58e:	fd 89       	ldd	r31, Y+21	; 0x15
 590:	cf 01       	movw	r24, r30
 592:	82 96       	adiw	r24, 0x22	; 34
 594:	9d 8b       	std	Y+21, r25	; 0x15
 596:	8c 8b       	std	Y+20, r24	; 0x14
					if((Stp_Drv->Scale_Pos_dk % 15)==0)
 598:	9a 01       	movw	r18, r20
 59a:	a9 e8       	ldi	r26, 0x89	; 137
 59c:	b8 e8       	ldi	r27, 0x88	; 136
 59e:	0e 94 08 05 	call	0xa10	; 0xa10 <__umulhisi3>
 5a2:	96 95       	lsr	r25
 5a4:	87 95       	ror	r24
 5a6:	96 95       	lsr	r25
 5a8:	87 95       	ror	r24
 5aa:	96 95       	lsr	r25
 5ac:	87 95       	ror	r24
 5ae:	6f e0       	ldi	r22, 0x0F	; 15
 5b0:	68 9f       	mul	r22, r24
 5b2:	90 01       	movw	r18, r0
 5b4:	69 9f       	mul	r22, r25
 5b6:	30 0d       	add	r19, r0
 5b8:	11 24       	eor	r1, r1
 5ba:	42 17       	cp	r20, r18
 5bc:	53 07       	cpc	r21, r19
 5be:	31 f4       	brne	.+12     	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
					Stp_Drv->State         = NORMAL_MODE;
				}
			
				if(Stp_Drv->Reel_Pos_dk != Stp_Drv->Scale_Pos_dk)
				{
					Stp_Drv->Reel_Pos_stp += 34;
 5c2:	e0 e0       	ldi	r30, 0x00	; 0
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
					if((Stp_Drv->Scale_Pos_dk % 15)==0)
					{
						Stp_Drv->Reel_Pos_stp += 2;
 5c6:	b4 96       	adiw	r30, 0x24	; 36
 5c8:	fd 8b       	std	Y+21, r31	; 0x15
 5ca:	ec 8b       	std	Y+20, r30	; 0x14
					}
					Stp_Drv->State = STEP_MODE;
 5cc:	87 e0       	ldi	r24, 0x07	; 7
 5ce:	89 87       	std	Y+9, r24	; 0x09
 5d0:	16 c0       	rjmp	.+44     	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
				}
				else
				{
					Stepper_Off(Stp_Drv);
 5d2:	ce 01       	movw	r24, r28
 5d4:	0e 94 1c 01 	call	0x238	; 0x238 <Stepper_Off>
 5d8:	12 c0       	rjmp	.+36     	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
				}
			break;
		case STEP_MODE:
				if(Stp_Drv->Reel_Pos_stp != Stp_Drv->Scale_Pos_stp)
 5da:	2c 89       	ldd	r18, Y+20	; 0x14
 5dc:	3d 89       	ldd	r19, Y+21	; 0x15
 5de:	8e 89       	ldd	r24, Y+22	; 0x16
 5e0:	9f 89       	ldd	r25, Y+23	; 0x17
 5e2:	28 17       	cp	r18, r24
 5e4:	39 07       	cpc	r19, r25
 5e6:	21 f0       	breq	.+8      	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
				{
					Stepper_Next_Step(Stp_Drv);
 5e8:	ce 01       	movw	r24, r28
 5ea:	0e 94 a9 01 	call	0x352	; 0x352 <Stepper_Next_Step>
 5ee:	07 c0       	rjmp	.+14     	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
				}
				else
				{
					Stp_Drv->Scale_Pos_dk++;
 5f0:	8a 89       	ldd	r24, Y+18	; 0x12
 5f2:	9b 89       	ldd	r25, Y+19	; 0x13
 5f4:	01 96       	adiw	r24, 0x01	; 1
 5f6:	9b 8b       	std	Y+19, r25	; 0x13
 5f8:	8a 8b       	std	Y+18, r24	; 0x12
					Stp_Drv->State = NORMAL_MODE;
 5fa:	86 e0       	ldi	r24, 0x06	; 6
 5fc:	89 87       	std	Y+9, r24	; 0x09
				}
			break;
	}
}
 5fe:	df 91       	pop	r29
 600:	cf 91       	pop	r28
 602:	08 95       	ret

00000604 <__vector_18>:
}
/********************************************************************************************************************************************************************************************************/
/********************************************************************************************************************************************************************************************************/
/********************************************************************************************************************************************************************************************************/
ISR(USART_RX_vect)
{
 604:	1f 92       	push	r1
 606:	0f 92       	push	r0
 608:	0f b6       	in	r0, 0x3f	; 63
 60a:	0f 92       	push	r0
 60c:	11 24       	eor	r1, r1
 60e:	2f 93       	push	r18
 610:	3f 93       	push	r19
 612:	8f 93       	push	r24
 614:	9f 93       	push	r25
 616:	ef 93       	push	r30
 618:	ff 93       	push	r31
	rx_byte = UDR0;
 61a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 61e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	
	if(packet_received==0)
 622:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <packet_received>
 626:	81 11       	cpse	r24, r1
 628:	24 c1       	rjmp	.+584    	; 0x872 <__vector_18+0x26e>
	{
		if((rx_Count==0)&&(rx_byte==0x01))
 62a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rx_Count>
 62e:	81 11       	cpse	r24, r1
 630:	1c c0       	rjmp	.+56     	; 0x66a <__vector_18+0x66>
 632:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 636:	81 30       	cpi	r24, 0x01	; 1
 638:	c1 f4       	brne	.+48     	; 0x66a <__vector_18+0x66>
		{
			rx_Buffer[rx_Count]=rx_byte;
 63a:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <rx_Count>
 63e:	f0 e0       	ldi	r31, 0x00	; 0
 640:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 644:	ef 5e       	subi	r30, 0xEF	; 239
 646:	fe 4f       	sbci	r31, 0xFE	; 254
 648:	80 83       	st	Z, r24
			rx_Count++;
 64a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rx_Count>
 64e:	8f 5f       	subi	r24, 0xFF	; 255
 650:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rx_Count>
			ceksum = rx_byte;
 654:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <ceksum+0x1>
 65e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <ceksum>
			rx_time_over = RX_TIME_OVER;
 662:	82 e3       	ldi	r24, 0x32	; 50
 664:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <rx_time_over>
 668:	04 c1       	rjmp	.+520    	; 0x872 <__vector_18+0x26e>
		}
		else if((rx_Count==1)&&(rx_byte==0x02))
 66a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rx_Count>
 66e:	81 30       	cpi	r24, 0x01	; 1
 670:	09 f5       	brne	.+66     	; 0x6b4 <__vector_18+0xb0>
 672:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 676:	82 30       	cpi	r24, 0x02	; 2
 678:	e9 f4       	brne	.+58     	; 0x6b4 <__vector_18+0xb0>
		{
			rx_Buffer[rx_Count]=rx_byte;
 67a:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <rx_Count>
 67e:	f0 e0       	ldi	r31, 0x00	; 0
 680:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 684:	ef 5e       	subi	r30, 0xEF	; 239
 686:	fe 4f       	sbci	r31, 0xFE	; 254
 688:	80 83       	st	Z, r24
			rx_Count++;
 68a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rx_Count>
 68e:	8f 5f       	subi	r24, 0xFF	; 255
 690:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rx_Count>
			ceksum+=rx_byte;
 694:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 698:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <ceksum>
 69c:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <ceksum+0x1>
 6a0:	82 0f       	add	r24, r18
 6a2:	91 1d       	adc	r25, r1
 6a4:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <ceksum+0x1>
 6a8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <ceksum>
			rx_time_over = RX_TIME_OVER;
 6ac:	82 e3       	ldi	r24, 0x32	; 50
 6ae:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <rx_time_over>
 6b2:	df c0       	rjmp	.+446    	; 0x872 <__vector_18+0x26e>
		}
		else if((rx_Count>=2)&&(rx_Count<=0x04))
 6b4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rx_Count>
 6b8:	82 30       	cpi	r24, 0x02	; 2
 6ba:	08 f4       	brcc	.+2      	; 0x6be <__vector_18+0xba>
 6bc:	62 c0       	rjmp	.+196    	; 0x782 <__vector_18+0x17e>
 6be:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rx_Count>
 6c2:	85 30       	cpi	r24, 0x05	; 5
 6c4:	08 f0       	brcs	.+2      	; 0x6c8 <__vector_18+0xc4>
 6c6:	5d c0       	rjmp	.+186    	; 0x782 <__vector_18+0x17e>
		{
			if(rx_Count==2)
 6c8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rx_Count>
 6cc:	82 30       	cpi	r24, 0x02	; 2
 6ce:	d1 f4       	brne	.+52     	; 0x704 <__vector_18+0x100>
			{
				rx_Buffer[rx_Count]=rx_byte;
 6d0:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <rx_Count>
 6d4:	f0 e0       	ldi	r31, 0x00	; 0
 6d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 6da:	ef 5e       	subi	r30, 0xEF	; 239
 6dc:	fe 4f       	sbci	r31, 0xFE	; 254
 6de:	80 83       	st	Z, r24
				rx_Count++;
 6e0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rx_Count>
 6e4:	8f 5f       	subi	r24, 0xFF	; 255
 6e6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rx_Count>
				ceksum+=rx_byte;
 6ea:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 6ee:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <ceksum>
 6f2:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <ceksum+0x1>
 6f6:	82 0f       	add	r24, r18
 6f8:	91 1d       	adc	r25, r1
 6fa:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <ceksum+0x1>
 6fe:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <ceksum>
 702:	3b c0       	rjmp	.+118    	; 0x77a <__vector_18+0x176>
			}
			else if(rx_Count==3)
 704:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rx_Count>
 708:	83 30       	cpi	r24, 0x03	; 3
 70a:	d1 f4       	brne	.+52     	; 0x740 <__vector_18+0x13c>
			{
				rx_Buffer[rx_Count]=rx_byte;
 70c:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <rx_Count>
 710:	f0 e0       	ldi	r31, 0x00	; 0
 712:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 716:	ef 5e       	subi	r30, 0xEF	; 239
 718:	fe 4f       	sbci	r31, 0xFE	; 254
 71a:	80 83       	st	Z, r24
				rx_Count++;
 71c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rx_Count>
 720:	8f 5f       	subi	r24, 0xFF	; 255
 722:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rx_Count>
				ceksum+=rx_byte;
 726:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 72a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <ceksum>
 72e:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <ceksum+0x1>
 732:	82 0f       	add	r24, r18
 734:	91 1d       	adc	r25, r1
 736:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <ceksum+0x1>
 73a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <ceksum>
 73e:	1d c0       	rjmp	.+58     	; 0x77a <__vector_18+0x176>
			}
			else if(rx_Count==4)
 740:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rx_Count>
 744:	84 30       	cpi	r24, 0x04	; 4
 746:	c9 f4       	brne	.+50     	; 0x77a <__vector_18+0x176>
			{
				rx_Buffer[rx_Count]=rx_byte;
 748:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <rx_Count>
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 752:	ef 5e       	subi	r30, 0xEF	; 239
 754:	fe 4f       	sbci	r31, 0xFE	; 254
 756:	80 83       	st	Z, r24
				rx_Count++;
 758:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rx_Count>
 75c:	8f 5f       	subi	r24, 0xFF	; 255
 75e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rx_Count>
				ceksum+=rx_byte;
 762:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 766:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <ceksum>
 76a:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <ceksum+0x1>
 76e:	82 0f       	add	r24, r18
 770:	91 1d       	adc	r25, r1
 772:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <ceksum+0x1>
 776:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <ceksum>
			}
			rx_time_over = RX_TIME_OVER;
 77a:	82 e3       	ldi	r24, 0x32	; 50
 77c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <rx_time_over>
 780:	78 c0       	rjmp	.+240    	; 0x872 <__vector_18+0x26e>
		}
		else if((rx_Count>=5)&&(rx_Count<=0x06))
 782:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rx_Count>
 786:	85 30       	cpi	r24, 0x05	; 5
 788:	78 f1       	brcs	.+94     	; 0x7e8 <__vector_18+0x1e4>
 78a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rx_Count>
 78e:	87 30       	cpi	r24, 0x07	; 7
 790:	58 f5       	brcc	.+86     	; 0x7e8 <__vector_18+0x1e4>
		{
			if(rx_Count==5)
 792:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rx_Count>
 796:	85 30       	cpi	r24, 0x05	; 5
 798:	89 f4       	brne	.+34     	; 0x7bc <__vector_18+0x1b8>
			{
				rx_Buffer[rx_Count]=rx_byte;
 79a:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <rx_Count>
 79e:	f0 e0       	ldi	r31, 0x00	; 0
 7a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 7a4:	ef 5e       	subi	r30, 0xEF	; 239
 7a6:	fe 4f       	sbci	r31, 0xFE	; 254
 7a8:	80 83       	st	Z, r24
				rx_Count++;
 7aa:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rx_Count>
 7ae:	8f 5f       	subi	r24, 0xFF	; 255
 7b0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rx_Count>
				rx_time_over = RX_TIME_OVER;
 7b4:	82 e3       	ldi	r24, 0x32	; 50
 7b6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <rx_time_over>
 7ba:	5b c0       	rjmp	.+182    	; 0x872 <__vector_18+0x26e>
			}
			else if(rx_Count==6)
 7bc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rx_Count>
 7c0:	86 30       	cpi	r24, 0x06	; 6
 7c2:	09 f0       	breq	.+2      	; 0x7c6 <__vector_18+0x1c2>
 7c4:	56 c0       	rjmp	.+172    	; 0x872 <__vector_18+0x26e>
			{
				rx_Buffer[rx_Count]=rx_byte;
 7c6:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <rx_Count>
 7ca:	f0 e0       	ldi	r31, 0x00	; 0
 7cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 7d0:	ef 5e       	subi	r30, 0xEF	; 239
 7d2:	fe 4f       	sbci	r31, 0xFE	; 254
 7d4:	80 83       	st	Z, r24
				rx_Count++;
 7d6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rx_Count>
 7da:	8f 5f       	subi	r24, 0xFF	; 255
 7dc:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rx_Count>
				rx_time_over = RX_TIME_OVER;
 7e0:	82 e3       	ldi	r24, 0x32	; 50
 7e2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <rx_time_over>
 7e6:	45 c0       	rjmp	.+138    	; 0x872 <__vector_18+0x26e>
			}
		}
		else if(rx_Count==7)
 7e8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rx_Count>
 7ec:	87 30       	cpi	r24, 0x07	; 7
 7ee:	d9 f5       	brne	.+118    	; 0x866 <__vector_18+0x262>
		{
			rx_Buffer[rx_Count]=rx_byte;
 7f0:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <rx_Count>
 7f4:	f0 e0       	ldi	r31, 0x00	; 0
 7f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 7fa:	ef 5e       	subi	r30, 0xEF	; 239
 7fc:	fe 4f       	sbci	r31, 0xFE	; 254
 7fe:	80 83       	st	Z, r24
			rx_Count=0;
 800:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <rx_Count>
			if(rx_Buffer[5]==0x20)
 804:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <rx_Buffer+0x5>
 808:	80 32       	cpi	r24, 0x20	; 32
 80a:	11 f4       	brne	.+4      	; 0x810 <__vector_18+0x20c>
			{
				rx_Buffer[5]=0x00;
 80c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <rx_Buffer+0x5>
			}
			if((((ceksum>>8)&0xff)==rx_Buffer[5])&&((ceksum&0xff)==rx_Buffer[6]))
 810:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <ceksum>
 814:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <ceksum+0x1>
 818:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <rx_Buffer+0x5>
 81c:	23 2f       	mov	r18, r19
 81e:	33 27       	eor	r19, r19
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	28 17       	cp	r18, r24
 824:	39 07       	cpc	r19, r25
 826:	a9 f4       	brne	.+42     	; 0x852 <__vector_18+0x24e>
 828:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <ceksum>
 82c:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <ceksum+0x1>
 830:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <rx_Buffer+0x6>
 834:	33 27       	eor	r19, r19
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	28 17       	cp	r18, r24
 83a:	39 07       	cpc	r19, r25
 83c:	51 f4       	brne	.+20     	; 0x852 <__vector_18+0x24e>
			{
				packet_received=1;
 83e:	81 e0       	ldi	r24, 0x01	; 1
 840:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <packet_received>
				rx_Count = 0;
 844:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <rx_Count>
				ceksum   = 0;
 848:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <ceksum+0x1>
 84c:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <ceksum>
 850:	06 c0       	rjmp	.+12     	; 0x85e <__vector_18+0x25a>
			}
			else
			{
				rx_Count = 0;
 852:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <rx_Count>
				ceksum   = 0;
 856:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <ceksum+0x1>
 85a:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <ceksum>
			}
			rx_time_over = RX_TIME_OVER;
 85e:	82 e3       	ldi	r24, 0x32	; 50
 860:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <rx_time_over>
 864:	06 c0       	rjmp	.+12     	; 0x872 <__vector_18+0x26e>
		}
		else
		{
			rx_Count = 0;
 866:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <rx_Count>
			ceksum   = 0;
 86a:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <ceksum+0x1>
 86e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <ceksum>
		}
	}
}
 872:	ff 91       	pop	r31
 874:	ef 91       	pop	r30
 876:	9f 91       	pop	r25
 878:	8f 91       	pop	r24
 87a:	3f 91       	pop	r19
 87c:	2f 91       	pop	r18
 87e:	0f 90       	pop	r0
 880:	0f be       	out	0x3f, r0	; 63
 882:	0f 90       	pop	r0
 884:	1f 90       	pop	r1
 886:	18 95       	reti

00000888 <__vector_14>:
/********************************************************************************************************************************************************************************************************/
/********************************************************************************************************************************************************************************************************/
/********************************************************************************************************************************************************************************************************/
ISR(TIMER0_COMPA_vect)
{
 888:	1f 92       	push	r1
 88a:	0f 92       	push	r0
 88c:	0f b6       	in	r0, 0x3f	; 63
 88e:	0f 92       	push	r0
 890:	11 24       	eor	r1, r1
 892:	2f 93       	push	r18
 894:	3f 93       	push	r19
 896:	4f 93       	push	r20
 898:	5f 93       	push	r21
 89a:	6f 93       	push	r22
 89c:	7f 93       	push	r23
 89e:	8f 93       	push	r24
 8a0:	9f 93       	push	r25
 8a2:	af 93       	push	r26
 8a4:	bf 93       	push	r27
 8a6:	ef 93       	push	r30
 8a8:	ff 93       	push	r31
	if(dl_ms>0)
 8aa:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <dl_ms>
 8ae:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <dl_ms+0x1>
 8b2:	89 2b       	or	r24, r25
 8b4:	49 f0       	breq	.+18     	; 0x8c8 <__vector_14+0x40>
	{
		dl_ms--;
 8b6:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <dl_ms>
 8ba:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <dl_ms+0x1>
 8be:	01 97       	sbiw	r24, 0x01	; 1
 8c0:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <dl_ms+0x1>
 8c4:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <dl_ms>
	}
	if(rx_time_over>0)
 8c8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <rx_time_over>
 8cc:	88 23       	and	r24, r24
 8ce:	31 f0       	breq	.+12     	; 0x8dc <__vector_14+0x54>
	{
		rx_time_over--;
 8d0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <rx_time_over>
 8d4:	81 50       	subi	r24, 0x01	; 1
 8d6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <rx_time_over>
 8da:	06 c0       	rjmp	.+12     	; 0x8e8 <__vector_14+0x60>
	}
	else
	{
		rx_Count = 0;
 8dc:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <rx_Count>
		ceksum   = 0;
 8e0:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <ceksum+0x1>
 8e4:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <ceksum>
	}
	
	Stepper_Clock_Process(&F_Stepper_Clock);
 8e8:	8d e1       	ldi	r24, 0x1D	; 29
 8ea:	91 e0       	ldi	r25, 0x01	; 1
 8ec:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Stepper_Clock_Process>
	Stepper_Clock_Process(&R_Stepper_Clock);
 8f0:	85 e3       	ldi	r24, 0x35	; 53
 8f2:	91 e0       	ldi	r25, 0x01	; 1
 8f4:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Stepper_Clock_Process>
}
 8f8:	ff 91       	pop	r31
 8fa:	ef 91       	pop	r30
 8fc:	bf 91       	pop	r27
 8fe:	af 91       	pop	r26
 900:	9f 91       	pop	r25
 902:	8f 91       	pop	r24
 904:	7f 91       	pop	r23
 906:	6f 91       	pop	r22
 908:	5f 91       	pop	r21
 90a:	4f 91       	pop	r20
 90c:	3f 91       	pop	r19
 90e:	2f 91       	pop	r18
 910:	0f 90       	pop	r0
 912:	0f be       	out	0x3f, r0	; 63
 914:	0f 90       	pop	r0
 916:	1f 90       	pop	r1
 918:	18 95       	reti

0000091a <Serial_Uart_Init>:
/********************************************************************************************************************************************************************************************************/
/********************************************************************************************************************************************************************************************************/
void Serial_Uart_Init(void)
{
	/* 9600 baud */
	UBRR0L = (uint8_t)(BAUD_PRESCALE & 0xff);
 91a:	8c e0       	ldi	r24, 0x0C	; 12
 91c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UBRR0H = (uint8_t)(BAUD_PRESCALE >> 8);
 920:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UCSR0B =
 924:	80 e9       	ldi	r24, 0x90	; 144
 926:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
		/* interrupt on receive */
		(1 << RXCIE0) |
		(1 << RXEN0);
	UCSR0C =
 92a:	86 e0       	ldi	r24, 0x06	; 6
 92c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 930:	08 95       	ret

00000932 <timer0_init>:
/********************************************************************************************************************************************************************************************************/
/********************************************************************************************************************************************************************************************************/
/********************************************************************************************************************************************************************************************************/
void timer0_init(void)
{
	TCCR0A = (1 << WGM01);
 932:	82 e0       	ldi	r24, 0x02	; 2
 934:	84 bd       	out	0x24, r24	; 36
	OCR0A  = 15;
 936:	9f e0       	ldi	r25, 0x0F	; 15
 938:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1 << OCIE0A);
 93a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	TCCR0B = (1 << CS01) | (1 << CS00);
 93e:	83 e0       	ldi	r24, 0x03	; 3
 940:	85 bd       	out	0x25, r24	; 37
 942:	08 95       	ret

00000944 <main>:

#define RX_EN   0

int main(void)
{
    packet_received = 1;
 944:	81 e0       	ldi	r24, 0x01	; 1
 946:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <packet_received>
    
    cli();
 94a:	f8 94       	cli
    timer0_init();
 94c:	0e 94 99 04 	call	0x932	; 0x932 <timer0_init>
    
    pinMode(B,0,OUTPUT);
 950:	20 9a       	sbi	0x04, 0	; 4
    digitalWrite(B,0,LOW);
 952:	28 98       	cbi	0x05, 0	; 5
    
    Serial_Uart_Init();
 954:	0e 94 8d 04 	call	0x91a	; 0x91a <Serial_Uart_Init>
	
	Stepper_Init(&F_Stepper_Clock, 4, F_HEF4094_CLK, 4,  F_HEF4094_DAT, 3, F_REF_12, 3, F_REF_DK);
 958:	88 24       	eor	r8, r8
 95a:	83 94       	inc	r8
 95c:	0f 2e       	mov	r0, r31
 95e:	f3 e0       	ldi	r31, 0x03	; 3
 960:	af 2e       	mov	r10, r31
 962:	f0 2d       	mov	r31, r0
 964:	c1 2c       	mov	r12, r1
 966:	0f 2e       	mov	r0, r31
 968:	f3 e0       	ldi	r31, 0x03	; 3
 96a:	ef 2e       	mov	r14, r31
 96c:	f0 2d       	mov	r31, r0
 96e:	05 e0       	ldi	r16, 0x05	; 5
 970:	24 e0       	ldi	r18, 0x04	; 4
 972:	42 e0       	ldi	r20, 0x02	; 2
 974:	64 e0       	ldi	r22, 0x04	; 4
 976:	8d e1       	ldi	r24, 0x1D	; 29
 978:	91 e0       	ldi	r25, 0x01	; 1
 97a:	0e 94 27 01 	call	0x24e	; 0x24e <Stepper_Init>
	Stepper_Init(&R_Stepper_Clock, 4, R_HEF4094_CLK, 4,  R_HEF4094_DAT, 3, R_REF_12, 3, R_REF_DK);
 97e:	0f 2e       	mov	r0, r31
 980:	f3 e0       	ldi	r31, 0x03	; 3
 982:	8f 2e       	mov	r8, r31
 984:	f0 2d       	mov	r31, r0
 986:	68 94       	set
 988:	cc 24       	eor	r12, r12
 98a:	c1 f8       	bld	r12, 1
 98c:	04 e0       	ldi	r16, 0x04	; 4
 98e:	24 e0       	ldi	r18, 0x04	; 4
 990:	43 e0       	ldi	r20, 0x03	; 3
 992:	64 e0       	ldi	r22, 0x04	; 4
 994:	85 e3       	ldi	r24, 0x35	; 53
 996:	91 e0       	ldi	r25, 0x01	; 1
 998:	0e 94 27 01 	call	0x24e	; 0x24e <Stepper_Init>
	
    sei();
 99c:	78 94       	sei
    
    packet_received = 0;
 99e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <packet_received>
    {
        wdt_reset();
		
        if(packet_received==1)
        {
            k_reel_dk  = rx_Buffer[2];
 9a2:	c1 e1       	ldi	r28, 0x11	; 17
 9a4:	d1 e0       	ldi	r29, 0x01	; 1
            k_reel_dk *= 60;
            k_reel_dk += rx_Buffer[3];
 9a6:	1c e3       	ldi	r17, 0x3C	; 60
    
    packet_received = 0;
	
    while(1)
    {
        wdt_reset();
 9a8:	a8 95       	wdr
		
        if(packet_received==1)
 9aa:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <packet_received>
 9ae:	81 30       	cpi	r24, 0x01	; 1
 9b0:	d9 f7       	brne	.-10     	; 0x9a8 <main+0x64>
        {
            k_reel_dk  = rx_Buffer[2];
 9b2:	2a 81       	ldd	r18, Y+2	; 0x02
            k_reel_dk *= 60;
            k_reel_dk += rx_Buffer[3];
 9b4:	8b 81       	ldd	r24, Y+3	; 0x03
 9b6:	90 e0       	ldi	r25, 0x00	; 0
 9b8:	12 9f       	mul	r17, r18
 9ba:	80 0d       	add	r24, r0
 9bc:	91 1d       	adc	r25, r1
 9be:	11 24       	eor	r1, r1

            if(k_reel_dk>719)
 9c0:	80 3d       	cpi	r24, 0xD0	; 208
 9c2:	22 e0       	ldi	r18, 0x02	; 2
 9c4:	92 07       	cpc	r25, r18
 9c6:	28 f4       	brcc	.+10     	; 0x9d2 <main+0x8e>
		
        if(packet_received==1)
        {
            k_reel_dk  = rx_Buffer[2];
            k_reel_dk *= 60;
            k_reel_dk += rx_Buffer[3];
 9c8:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 9cc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 9d0:	06 c0       	rjmp	.+12     	; 0x9de <main+0x9a>

            if(k_reel_dk>719)
            {
                k_reel_dk -= 720;
 9d2:	80 5d       	subi	r24, 0xD0	; 208
 9d4:	92 40       	sbci	r25, 0x02	; 2
 9d6:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 9da:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
            }
			
			Stepper_Set_Reel_Pos_dk(&F_Stepper_Clock, k_reel_dk);
 9de:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <__data_end>
 9e2:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <__data_end+0x1>
 9e6:	8d e1       	ldi	r24, 0x1D	; 29
 9e8:	91 e0       	ldi	r25, 0x01	; 1
 9ea:	0e 94 a5 01 	call	0x34a	; 0x34a <Stepper_Set_Reel_Pos_dk>
			Stepper_Set_Reel_Pos_dk(&R_Stepper_Clock, k_reel_dk);
 9ee:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <__data_end>
 9f2:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <__data_end+0x1>
 9f6:	85 e3       	ldi	r24, 0x35	; 53
 9f8:	91 e0       	ldi	r25, 0x01	; 1
 9fa:	0e 94 a5 01 	call	0x34a	; 0x34a <Stepper_Set_Reel_Pos_dk>

            packet_received=0;
 9fe:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <packet_received>
 a02:	d2 cf       	rjmp	.-92     	; 0x9a8 <main+0x64>

00000a04 <__tablejump2__>:
 a04:	ee 0f       	add	r30, r30
 a06:	ff 1f       	adc	r31, r31
 a08:	05 90       	lpm	r0, Z+
 a0a:	f4 91       	lpm	r31, Z
 a0c:	e0 2d       	mov	r30, r0
 a0e:	09 94       	ijmp

00000a10 <__umulhisi3>:
 a10:	a2 9f       	mul	r26, r18
 a12:	b0 01       	movw	r22, r0
 a14:	b3 9f       	mul	r27, r19
 a16:	c0 01       	movw	r24, r0
 a18:	a3 9f       	mul	r26, r19
 a1a:	70 0d       	add	r23, r0
 a1c:	81 1d       	adc	r24, r1
 a1e:	11 24       	eor	r1, r1
 a20:	91 1d       	adc	r25, r1
 a22:	b2 9f       	mul	r27, r18
 a24:	70 0d       	add	r23, r0
 a26:	81 1d       	adc	r24, r1
 a28:	11 24       	eor	r1, r1
 a2a:	91 1d       	adc	r25, r1
 a2c:	08 95       	ret

00000a2e <_exit>:
 a2e:	f8 94       	cli

00000a30 <__stop_program>:
 a30:	ff cf       	rjmp	.-2      	; 0xa30 <__stop_program>
